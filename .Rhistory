geom_line(data = macro, aes(color = "Macrolides")) +
geom_point(data = glyco, aes(color = "Glycopeptides"), size = 1.5) +
geom_line(data = glyco, aes(color = "Glycopeptides")) +
geom_point(data = amino, aes(color = "Aminoglycosides"), size = 1.5) +
geom_line(data = amino, aes(color = "Aminoglycosides")) +
geom_point(data = amphe, aes(color = "Amphenicols"), size = 1.5) +
geom_line(data = amphe, aes(color = "Amphenicols")) +
geom_point(data = keto, aes(color = "Ketolides"), size = 1.5) +
geom_line(data = keto, aes(color = "Ketolides")) +
geom_point(data = other, aes(color = "Other"), size = 1.5) +
geom_line(data = other, aes(color = "Other")) +
geom_hline(yintercept = 0, linetype = "solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
geom_vline(xintercept = as.numeric(as.Date("2022-01-16")), linetype="dashed") +
scale_y_continuous(name="Patient Number", limits = c(0, 15000000)) +
scale_x_date(name="Date", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-30'))) +
scale_color_manual(values = c("Total(anti)" = "Black", "Penicillins" = "Blue", "Cephalosporins" = "Red",
"Tetracyclines" = "Green", "Macrolides" = "Purple", "Glycopeptides" = "Brown",
"Aminoglycosides" = "Gray", "Amphenicols" = "Orange", "Ketolides" = "Pink", "Other" = "Turquoise"),
name = "Category", labels = c("Total(anti)", "Penicillins", "Cephalosporins", "Tetracyclines",
"Macrolides", "Glycopeptides", "Aminoglycosides", "Amphenicols",
"Ketolides", "Other")) +
theme_gray(20) +
theme(panel.background = element_blank(),
panel.grid.major = element_line(color = "grey90", size = 0.5),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title = element_text(size = rel(1.0)),
legend.title = element_blank())
##penicillins
ggplot(data=peni, aes(x = date, y = category_pres)) +
geom_point(color="black", size=1.5) +
geom_line(color="black") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="pres",limits = c(0,2000000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
#성분별 그래프
#전제
ggplot(data = anti, aes(x = date, y = category_pres)) +
geom_point(aes(color = "Total(anti)"), size = 1.5) +
geom_line(aes(color = "Total(anti)")) +
geom_point(data = peni, aes(color = "Penicillins"), size = 1.5) +
geom_line(data = peni, aes(color = "Penicillins")) +
geom_point(data = cepha, aes(color = "Cephalosporins"), size = 1.5) +
geom_line(data = cepha, aes(color = "Cephalosporins")) +
geom_point(data = tetra, aes(color = "Tetracyclines"), size = 1.5) +
geom_line(data = tetra, aes(color = "Tetracyclines")) +
geom_point(data = macro, aes(color = "Macrolides"), size = 1.5) +
geom_line(data = macro, aes(color = "Macrolides")) +
geom_point(data = glyco, aes(color = "Glycopeptides"), size = 1.5) +
geom_line(data = glyco, aes(color = "Glycopeptides")) +
geom_point(data = amino, aes(color = "Aminoglycosides"), size = 1.5) +
geom_line(data = amino, aes(color = "Aminoglycosides")) +
geom_point(data = amphe, aes(color = "Amphenicols"), size = 1.5) +
geom_line(data = amphe, aes(color = "Amphenicols")) +
geom_point(data = keto, aes(color = "Ketolides"), size = 1.5) +
geom_line(data = keto, aes(color = "Ketolides")) +
geom_point(data = other, aes(color = "Other"), size = 1.5) +
geom_line(data = other, aes(color = "Other")) +
geom_hline(yintercept = 0, linetype = "solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
geom_vline(xintercept = as.numeric(as.Date("2022-01-16")), linetype="dashed") +
scale_y_continuous(name="Patient Number", limits = c(0, 15000000)) +
scale_x_date(name="Date", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-30'))) +
scale_color_manual(values = c("Total(anti)" = "Black", "Penicillins" = "Blue", "Cephalosporins" = "Red",
"Tetracyclines" = "Green", "Macrolides" = "Purple", "Glycopeptides" = "Brown",
"Aminoglycosides" = "Gray", "Amphenicols" = "Orange", "Ketolides" = "Pink", "Other" = "Turquoise"),
name = "Category", labels = c("Total(anti)", "Penicillins", "Cephalosporins", "Tetracyclines",
"Macrolides", "Glycopeptides", "Aminoglycosides", "Amphenicols",
"Ketolides", "Other")) +
theme_gray(20) +
theme(panel.background = element_blank(),
panel.grid.major = element_line(color = "grey90", size = 0.5),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title = element_text(size = rel(1.0)),
legend.title = element_blank())
##penicillins
ggplot(data=peni, aes(x = date, y = category_pres)) +
geom_point(color="black", size=1.5) +
geom_line(color="black") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="pres",limits = c(0,2000000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
#성분별 그래프
#전제
ggplot(data = anti, aes(x = date, y = category_pres)) +
geom_point(aes(color = "Total(anti)"), size = 1.5) +
geom_line(aes(color = "Total(anti)")) +
geom_point(data = peni, aes(color = "Penicillins"), size = 1.5) +
geom_line(data = peni, aes(color = "Penicillins")) +
geom_point(data = cepha, aes(color = "Cephalosporins"), size = 1.5) +
geom_line(data = cepha, aes(color = "Cephalosporins")) +
geom_point(data = tetra, aes(color = "Tetracyclines"), size = 1.5) +
geom_line(data = tetra, aes(color = "Tetracyclines")) +
geom_point(data = macro, aes(color = "Macrolides"), size = 1.5) +
geom_line(data = macro, aes(color = "Macrolides")) +
geom_point(data = glyco, aes(color = "Glycopeptides"), size = 1.5) +
geom_line(data = glyco, aes(color = "Glycopeptides")) +
geom_point(data = amino, aes(color = "Aminoglycosides"), size = 1.5) +
geom_line(data = amino, aes(color = "Aminoglycosides")) +
geom_point(data = amphe, aes(color = "Amphenicols"), size = 1.5) +
geom_line(data = amphe, aes(color = "Amphenicols")) +
geom_point(data = keto, aes(color = "Ketolides"), size = 1.5) +
geom_line(data = keto, aes(color = "Ketolides")) +
geom_point(data = other, aes(color = "Other"), size = 1.5) +
geom_line(data = other, aes(color = "Other")) +
geom_hline(yintercept = 0, linetype = "solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
geom_vline(xintercept = as.numeric(as.Date("2022-01-16")), linetype="dashed") +
scale_y_continuous(name="Patient Number", limits = c(0, 15000000)) +
scale_x_date(name="Date", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-30'))) +
scale_color_manual(values = c("Total(anti)" = "Black", "Penicillins" = "Blue", "Cephalosporins" = "Red",
"Tetracyclines" = "Green", "Macrolides" = "Purple", "Glycopeptides" = "Brown",
"Aminoglycosides" = "Gray", "Amphenicols" = "Orange", "Ketolides" = "Pink", "Other" = "Turquoise"),
name = "Category", labels = c("Total(anti)", "Penicillins", "Cephalosporins", "Tetracyclines",
"Macrolides", "Glycopeptides", "Aminoglycosides", "Amphenicols",
"Ketolides", "Other")) +
theme_gray(20) +
theme(panel.background = element_blank(),
panel.grid.major = element_line(color = "grey90", size = 0.5),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title = element_text(size = rel(1.0)),
legend.title = element_blank())
####그래프 - amt ----
#전체
ggplot(data = anti, aes(x = date, y = category_amt)) +
geom_point(aes(color = "Total(anti)"), size = 1.5) +
geom_line(aes(color = "Total(anti)")) +
geom_point(data = peni, aes(color = "Penicillins"), size = 1.5) +
geom_line(data = peni, aes(color = "Penicillins")) +
geom_point(data = cepha, aes(color = "Cephalosporins"), size = 1.5) +
geom_line(data = cepha, aes(color = "Cephalosporins")) +
geom_point(data = tetra, aes(color = "Tetracyclines"), size = 1.5) +
geom_line(data = tetra, aes(color = "Tetracyclines")) +
geom_point(data = macro, aes(color = "Macrolides"), size = 1.5) +
geom_line(data = macro, aes(color = "Macrolides")) +
geom_point(data = glyco, aes(color = "Glycopeptides"), size = 1.5) +
geom_line(data = glyco, aes(color = "Glycopeptides")) +
geom_point(data = amino, aes(color = "Aminoglycosides"), size = 1.5) +
geom_line(data = amino, aes(color = "Aminoglycosides")) +
geom_point(data = amphe, aes(color = "Amphenicols"), size = 1.5) +
geom_line(data = amphe, aes(color = "Amphenicols")) +
geom_point(data = keto, aes(color = "Ketolides"), size = 1.5) +
geom_line(data = keto, aes(color = "Ketolides")) +
geom_point(data = other, aes(color = "Other"), size = 1.5) +
geom_line(data = other, aes(color = "Other")) +
geom_hline(yintercept = 0, linetype = "solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
geom_vline(xintercept = as.numeric(as.Date("2022-01-16")), linetype="dashed") +
scale_y_continuous(name="Prescription price", limits = c(0, 100000000000)) +
scale_x_date(name="Date", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-30'))) +
scale_color_manual(values = c("Total(anti)" = "Black", "Penicillins" = "Blue", "Cephalosporins" = "Red",
"Tetracyclines" = "Green", "Macrolides" = "Purple", "Glycopeptides" = "Brown",
"Aminoglycosides" = "Gray", "Amphenicols" = "Orange", "Ketolides" = "Pink", "Other" = "Turquoise"),
name = "Category", labels = c("Total(anti)", "Penicillins", "Cephalosporins", "Tetracyclines",
"Macrolides", "Glycopeptides", "Aminoglycosides", "Amphenicols",
"Ketolides", "Other")) +
theme_gray(20) +
theme(panel.background = element_blank(),
panel.grid.major = element_line(color = "grey90", size = 0.5),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title = element_text(size = rel(1.0)),
legend.title = element_blank())
library(lubridate)
library(readxl)
library(openxlsx)
View(anti)
View(anti)
View(cepha)
# 파일 저장 경로 설정
folder_path <- "MEDICINE/data/total/"
# 각 카테고리별 데이터 프레임을 CSV 파일로 저장
write.csv(anti, paste0(folder_path, "anti.csv"), row.names = FALSE)
write.csv(peni, paste0(folder_path, "penicillins.csv"), row.names = FALSE)
write.csv(cepha, paste0(folder_path, "cephalosporins.csv"), row.names = FALSE)
write.csv(tetra, paste0(folder_path, "tetracyclines.csv"), row.names = FALSE)
write.csv(macro, paste0(folder_path, "macrolides.csv"), row.names = FALSE)
write.csv(glyco, paste0(folder_path, "glycopeptides.csv"), row.names = FALSE)
write.csv(amino, paste0(folder_path, "aminoglycosides.csv"), row.names = FALSE)
write.csv(amphe, paste0(folder_path, "amphenicols.csv"), row.names = FALSE)
write.csv(keto, paste0(folder_path, "ketolides.csv"), row.names = FALSE)
write.csv(other, paste0(folder_path, "other_antibiotics.csv"), row.names = FALSE)
process_med_file <- function(file_path) {
med_df_hos <- read_csv(file_path)
result <- med_df_hos %>%
mutate(USE_YEAR = factor(USE_YEAR),
USE_MONTH = factor(USE_MONTH)) %>%
group_by(WK_COMPN_4, OUT_IN_HOS,USE_YEAR, USE_MONTH) %>%
summarise(pres = sum(PRSCRPTN_TNDN_CNT),
pt = sum(PATIENT_CNT))
return(result)
} #pres는 처방수, pt는 환자수
# 결과를 저장할 리스트 생성
MEDICINE_list_hos <- list()
# MEDINE(1)부터 MEDINE(69)까지의 파일에 대해 반복 작업 수행
for (i in 1:69) {
file_path <- paste0("MEDICINE/MEDICINE (", i, ").csv")
if(!file.exists(file_path)){next}
result <- process_med_file(file_path)
MEDICINE_list_hos[[i]] <- result
}
# 결과를 하나의 데이터프레임으로 병합
MEDICINE_result_hos <- do.call(rbind, MEDICINE_list_hos)
# 결과 확인
print(MEDICINE_result_hos)
#항생제 분류(class,jo,prod,category)
medi_inform_anti <- read.csv("filtered_class_antibiotics.csv") %>%
mutate(WK_COMPN_4 = jo) %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4)) %>%
select(-jo)
####데이터 전처리 및 항생제 사용 환자 추출 ----
MEDICINE_result_hos <- MEDICINE_result_hos %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4))
medicine_result_anti_hos <- inner_join(MEDICINE_result_hos, medi_inform_anti, by='WK_COMPN_4')
colSums(is.na(medicine_result_anti_hos))
head(medicine_result_anti_hos$pt)
#category로 합치기
medicine_result_anti_hos2 <- medicine_result_anti_hos %>%
group_by(USE_YEAR,USE_MONTH,category,OUT_IN_HOS) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt))
#날짜 만들기
medicine_result_anti_hos2$date = paste0(medicine_result_anti_hos2$USE_YEAR,medicine_result_anti_hos2$USE_MONTH)
medicine_result_anti_hos2$date <- as.Date(paste(as.character(medicine_result_anti_hos2$date), '01'), format='%Y%m%d')
View(anti)
View(medicine_result_anti)
#### 원내외 종별을 포함한 환자 데이터 추출 ----
# 반복 작업을 위한 함수 정의
process_med_file <- function(file_path) {
med_df_hos <- read_csv(file_path)
result <- med_df_hos %>%
mutate(USE_YEAR = factor(USE_YEAR),
USE_MONTH = factor(USE_MONTH)) %>%
group_by(WK_COMPN_4, OUT_IN_HOS,USE_YEAR, USE_MONTH) %>%
summarise(pres = sum(PRSCRPTN_TNDN_CNT),
pt = sum(PATIENT_CNT),
amt = sum(PRSCRPTN_AMT))
return(result)
} #pres는 처방수, pt는 환자수
# 결과를 저장할 리스트 생성
MEDICINE_list_hos <- list()
# MEDINE(1)부터 MEDINE(69)까지의 파일에 대해 반복 작업 수행
for (i in 1:69) {
file_path <- paste0("MEDICINE/MEDICINE (", i, ").csv")
if(!file.exists(file_path)){next}
result <- process_med_file(file_path)
MEDICINE_list_hos[[i]] <- result
}
# 결과를 하나의 데이터프레임으로 병합
MEDICINE_result_hos <- do.call(rbind, MEDICINE_list_hos)
# 결과 확인
print(MEDICINE_result_hos)
#항생제 분류(class,jo,prod,category)
medi_inform_anti <- read.csv("filtered_class_antibiotics.csv") %>%
mutate(WK_COMPN_4 = jo) %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4)) %>%
select(-jo)
####데이터 전처리 및 항생제 사용 환자 추출 ----
MEDICINE_result_hos <- MEDICINE_result_hos %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4))
medicine_result_anti_hos <- inner_join(MEDICINE_result_hos, medi_inform_anti, by='WK_COMPN_4')
colSums(is.na(medicine_result_anti_hos))
head(medicine_result_anti_hos$pt)
#category로 합치기
medicine_result_anti_hos2 <- medicine_result_anti_hos %>%
group_by(USE_YEAR,USE_MONTH,category,OUT_IN_HOS) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt),category_amt = sum(amt))
#날짜 만들기
medicine_result_anti_hos2$date = paste0(medicine_result_anti_hos2$USE_YEAR,medicine_result_anti_hos2$USE_MONTH)
medicine_result_anti_hos2$date <- as.Date(paste(as.character(medicine_result_anti_hos2$date), '01'), format='%Y%m%d')
View(medicine_result_anti_hos)
View(medicine_result_anti_hos2)
# 데이터 추출을 위한 함수
hos1 <- function(data, category, in_out) {
data %>%
filter(OUT_IN_HOS == in_out, category == category)
}
# 요약 데이터를 생성하는 함수
hos2 <- function(data, in_out) {
data %>%
filter(OUT_IN_HOS == in_out) %>%
group_by(USE_MONTH, USE_YEAR, OUT_IN_HOS, date) %>%
summarise(category_pres = sum(category_pres), category_pt = sum(category_pt),category_amt = sum(amt),
.groups = 'drop')
}
# 카테고리 리스트
categories <- c("Penicillins", "Cephalosporins", "Tetracyclines", "Macrolides",
"Glycopeptides", "Aminoglycosides", "Amphenicols", "Ketolides", "Other")
# 데이터 추출 및 요약
data_by_category <- function(data, in_out) {
list(
anti = summarize_data(data, in_out),
lapply(categories, function(cat) extract_data(data, cat, in_out))
)
}
# 병원내 IN 항생제 분류
IN_data <- data_by_category(medicine_result_anti_hos2, "IN")
# 데이터 추출을 위한 함수
hos1 <- function(data, category, in_out) {
data %>%
filter(OUT_IN_HOS == in_out, category == category)
}
# 요약 데이터를 생성하는 함수
hos2 <- function(data, in_out) {
data %>%
filter(OUT_IN_HOS == in_out) %>%
group_by(USE_MONTH, USE_YEAR, OUT_IN_HOS, date) %>%
summarise(category_pres = sum(category_pres), category_pt = sum(category_pt),category_amt = sum(amt),
.groups = 'drop')
}
# 카테고리 리스트
categories <- c("Penicillins", "Cephalosporins", "Tetracyclines", "Macrolides",
"Glycopeptides", "Aminoglycosides", "Amphenicols", "Ketolides", "Other")
# 데이터 추출 및 요약
data_by_category <- function(data, in_out) {
list(
anti = hos1(data, in_out),
lapply(categories, function(cat) hos2(data, cat, in_out))
)
}
# 병원내 IN 항생제 분류
IN_data <- data_by_category(medicine_result_anti_hos2, "IN")
# 병원외 OUT 항생제 분류
OUT_data <- data_by_category(medicine_result_anti_hos2, "OUT")
# 결과 확인
print(IN_data)
print(OUT_data)
View(hos2)
# 데이터 추출 및 요약
data_by_category <- function(data, in_out) {
list(
anti = hos1(data, in_out),
lapply(categories, function(cat) hos2(data, cat, in_out))
)
}
# 병원내 IN 항생제 분류
IN_data <- data_by_category(medicine_result_anti_hos2, "IN")
library(tidyverse)
library(ggplot2)
library(lubridate)
#### 원내외 종별을 포함한 환자 데이터 추출 ----
# 반복 작업을 위한 함수 정의
process_med_file <- function(file_path) {
med_df_hos <- read_csv(file_path)
result <- med_df_hos %>%
mutate(USE_YEAR = factor(USE_YEAR),
USE_MONTH = factor(USE_MONTH)) %>%
group_by(WK_COMPN_4, OUT_IN_HOS,USE_YEAR, USE_MONTH) %>%
summarise(pres = sum(PRSCRPTN_TNDN_CNT),
pt = sum(PATIENT_CNT), amt = sum(PRSCRPTN_AMT))
return(result)
} #pres는 처방수, pt는 환자수
# 결과를 저장할 리스트 생성
MEDICINE_list_hos <- list()
# MEDINE(1)부터 MEDINE(69)까지의 파일에 대해 반복 작업 수행
for (i in 1:69) {
file_path <- paste0("MEDICINE/MEDICINE (", i, ").csv")
if(!file.exists(file_path)){next}
result <- process_med_file(file_path)
MEDICINE_list_hos[[i]] <- result
}
# 결과를 하나의 데이터프레임으로 병합
MEDICINE_result_hos <- do.call(rbind, MEDICINE_list_hos)
# 결과 확인
print(MEDICINE_result_hos)
#항생제 분류(class,jo,prod,category)
medi_inform_anti <- read.csv("filtered_class_antibiotics.csv") %>%
mutate(WK_COMPN_4 = jo) %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4)) %>%
select(-jo)
####데이터 전처리 및 항생제 사용 환자 추출 ----
MEDICINE_result_hos <- MEDICINE_result_hos %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4))
medicine_result_anti_hos <- inner_join(MEDICINE_result_hos, medi_inform_anti, by='WK_COMPN_4')
colSums(is.na(medicine_result_anti_hos))
head(medicine_result_anti_hos$pt)
#category로 합치기
medicine_result_anti_hos2 <- medicine_result_anti_hos %>%
group_by(USE_YEAR,USE_MONTH,category,OUT_IN_HOS) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt), category_amt = sum(amt))
#날짜 만들기
medicine_result_anti_hos2$date = paste0(medicine_result_anti_hos2$USE_YEAR,medicine_result_anti_hos2$USE_MONTH)
medicine_result_anti_hos2$date <- as.Date(paste(as.character(medicine_result_anti_hos2$date), '01'), format='%Y%m%d')
View(medicine_result_anti_hos2)
# 카테고리별 데이터 추출 함수
extract_data_by_category <- function(data, in_out, category = NULL) {
filtered_data <- data %>%
filter(OUT_IN_HOS == in_out)
if (!is.null(category)) {
filtered_data <- filtered_data %>% filter(category == category)
}
return(filtered_data)
}
# 카테고리 리스트
categories <- c("Penicillins", "Cephalosporins", "Tetracyclines", "Macrolides",
"Glycopeptides", "Aminoglycosides", "Amphenicols", "Ketolides", "Other")
# 병원내 IN 데이터 요약 및 카테고리별 데이터 추출
IN_anti <- extract_data_by_category(medicine_result_anti_hos2, "IN") %>%
group_by(USE_MONTH, USE_YEAR, OUT_IN_HOS, date) %>%
summarise(category_pres = sum(category_pres), category_pt = sum(category_pt), .groups = 'drop')
# 각 카테고리별 데이터 추출 및 저장
IN_categories <- lapply(categories, function(cat) {
extract_data_by_category(medicine_result_anti_hos2, "IN", cat)
})
# 결과 데이터 프레임 목록에 요약 데이터 추가
names(IN_categories) <- categories
IN_categories$anti <- IN_anti
# 결과 확인
print(IN_categories)
View(IN_categories)
View(IN_categories)
View(IN_categories)
####그래프 - pt ----
options(scipen = 5) #과학적 스케일 적용
####그래프 pt IN,OUT ----
options(scipen = 5) #과학적 스케일 적용
View(IN_categories)
View(IN_anti)
# 저장할 파일 경로 지정
folder_path <- "MEDICINE/data/hos/in/"
# 필요한 경우, 디렉토리 생성
if (!dir.exists(folder_path)) {
dir.create(folder_path, recursive = TRUE)
}
# 데이터 저장 함수
save_data_to_csv <- function(data_list, path_prefix) {
names(data_list) <- c("Anti", categories)  # 요약 데이터 및 카테고리 이름 할당
lapply(names(data_list), function(name) {
file_path <- paste0(path_prefix, name, ".csv")
write.csv(data_list[[name]], file_path, row.names = FALSE)
})
}
# IN 데이터 저장
save_data_to_csv(IN_categories, folder_path)
View(extract_data_by_category)
?cat
# 카테고리별 데이터 추출 함수
extract_data_by_category <- function(data, in_out, category = NULL) {
filtered_data <- data %>%
filter(OUT_IN_HOS == in_out)
if (!is.null(category)) {
filtered_data <- filtered_data %>% filter(category == category)
}
return(filtered_data)
}
# 카테고리 리스트
categories <- c("Penicillins", "Cephalosporins", "Tetracyclines", "Macrolides",
"Glycopeptides", "Aminoglycosides", "Amphenicols", "Ketolides", "Other")
# 병원내 IN 데이터 요약 및 카테고리별 데이터 추출
IN_anti <- extract_data_by_category(medicine_result_anti_hos2, "IN") %>%
group_by(USE_MONTH, USE_YEAR, OUT_IN_HOS, date) %>%
summarise(category_pres = sum(category_pres), category_pt = sum(category_pt), .groups = 'drop')
# 각 카테고리별 데이터 추출 및 저장
IN_categories <- lapply(categories, function(cat) {
extract_data_by_category(medicine_result_anti_hos2, "IN", cat)
})
# 결과 데이터 프레임 목록에 요약 데이터 추가
names(IN_categories) <- categories
IN_categories$anti <- IN_anti
# 결과 확인
print(IN_categories)
# 저장할 파일 경로 지정
folder_path <- "MEDICINE/data/hos/in/"
# 필요한 경우, 디렉토리 생성
if (!dir.exists(folder_path)) {
dir.create(folder_path, recursive = TRUE)
}
# 데이터 저장 함수 수정 및 데이터 저장
save_data_to_csv(IN_categories, folder_path)
View(IN_categories)
View(medicine_result_anti_hos2)
read.csv(anti, "MEDICINE/data/total/anti.csv")
read.csv(anti, "MEDICINE/data/total/anti.csv")
read.csv(peni, "MEDICINE/data/total/penicillin.csv")
anti <- read.csv(anti, "MEDICINE/data/total/anti.csv")
read_csv(anti, "MEDICINE/data/total/anti.csv")
read_csv(anti, "MEDICINE/data/total/anti.csv")
read_csv(anti, "MEDICINE/data/total/anti.csv")
