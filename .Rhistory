axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Cephalosporins
ggplot(data=cepha, aes(x = date, y = category_pres)) +
geom_point(color="red", size=1.5) +
geom_line(color="red") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,7000000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
View(cepha)
##Cephalosporins
ggplot(data=cepha, aes(x = date, y = category_pres)) +
geom_point(color="red", size=1.5) +
geom_line(color="red") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,6000000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Tetracyclines
ggplot(data=tetra, aes(x = date, y = category_pres)) +
geom_point(color="blue", size=1.5) +
geom_line(color="blue") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,250000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
View(tetra)
##Tetracyclines
ggplot(data=tetra, aes(x = date, y = category_pres)) +
geom_point(color="blue", size=1.5) +
geom_line(color="blue") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,260000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Tetracyclines
ggplot(data=tetra, aes(x = date, y = category_pres)) +
geom_point(color="blue", size=1.5) +
geom_line(color="blue") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,300000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Macrolides
ggplot(data=macro, aes(x = date, y = category_pres)) +
geom_point(color="green", size=1.5) +
geom_line(color="green") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,3000000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Glycopeptides
ggplot(data=glyco, aes(x = date, y = category_pres)) +
geom_point(color="pink", size=1.5) +
geom_line(color="pink") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,30000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Aminoglycosides
ggplot(data=amino, aes(x = date, y = category_pres)) +
geom_point(color="purple", size=1.5) +
geom_line(color="purple") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,1000000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Amphenicols
ggplot(data=amphe, aes(x = date, y = category_pres)) +
geom_point(color="gray", size=1.5) +
geom_line(color="gray") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,1000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Amphenicols
ggplot(data=amphe, aes(x = date, y = category_pres)) +
geom_point(color="gray", size=1.5) +
geom_line(color="gray") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,1000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Aminoglycosides
ggplot(data=amino, aes(x = date, y = category_pres)) +
geom_point(color="purple", size=1.5) +
geom_line(color="purple") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,1000000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
View(amino)
##Aminoglycosides
ggplot(data=amino, aes(x = date, y = category_pres)) +
geom_point(color="purple", size=1.5) +
geom_line(color="purple") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,1100000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##Ketolides
ggplot(data=keto, aes(x = date, y = category_pres)) +
geom_point(color="brown", size=1.5) +
geom_line(color="brown") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,500000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##other
ggplot(data=other, aes(x = date, y = category_pres)) +
geom_point(color="orange", size=1.5) +
geom_line(color="orange") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,50000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
##total
total <- medicine_result_anti %>%
group_by(USE_YEAR,USE_MONTH) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt))
#패키지 ----
library(tidyverse)
library(ggplot2)
library(lubridate)
##total
total <- medicine_result_anti %>%
group_by(USE_YEAR,USE_MONTH) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt))
#날짜 만들기
total$date = paste0(total$USE_YEAR,total$USE_MONTH)
total$date <- as.Date(paste(as.character(total$date), '01'), format='%Y%m%d')
View(MEDICINE_list)
# 반복 작업을 위한 함수 정의
process_med_file <- function(file_path) {
med_df_hos <- read_csv(file_path)
result <- med_df_hos %>%
mutate(USE_YEAR = factor(USE_YEAR),
USE_MONTH = factor(USE_MONTH)) %>%
group_by(WK_COMPN_4, OUT_IN_HOS,USE_YEAR, USE_MONTH) %>%
summarise(pres = sum(PRSCRPTN_TNDN_CNT),
pt = sum(PATIENT_CNT))
return(result)
} #pres는 처방수, pt는 환자수
# 결과를 저장할 리스트 생성
MEDICINE_list_hos <- list()
# MEDINE(1)부터 MEDINE(70)까지의 파일에 대해 반복 작업 수행
for (i in 1:70) {
file_path <- paste0("MEDICINE/MEDICINE (", i, ").csv")
if(!file.exists(file_path)){next}
result <- process_med_file(file_path)
MEDICINE_list_hos[[i]] <- result
}
# 결과를 하나의 데이터프레임으로 병합
MEDICINE_result_hos <- do.call(rbind, MEDICINE_list_hos)
#패키지 ----
library(tidyverse)
library(ggplot2)
library(lubridate)
# Data screening -----
# 반복 작업을 위한 함수 정의
process_med_file <- function(file_path) {
med_df <- read_csv(file_path)
result <- med_df %>%
mutate(USE_YEAR = factor(USE_YEAR),
USE_MONTH = factor(USE_MONTH)) %>%
group_by(WK_COMPN_4, USE_YEAR, USE_MONTH) %>%
summarise(pres = sum(PRSCRPTN_TNDN_CNT),
pt = sum(PATIENT_CNT))
return(result)
} #pres는 처방수, pt는 환자수
# 결과를 저장할 리스트 생성
MEDICINE_list <- list()
# MEDINE(1)부터 MEDINE(70)까지의 파일에 대해 반복 작업 수행
for (i in 1:70) {
file_path <- paste0("MEDICINE/MEDICINE (", i, ").csv")
if(!file.exists(file_path)){next}
result <- process_med_file(file_path)
MEDICINE_list[[i]] <- result
}
# 결과를 하나의 데이터프레임으로 병합
MEDICINE_result <- do.call(rbind, MEDICINE_list)
# 결과 확인
print(MEDICINE_result)
# Medication name ----
medi_inform <- read_csv("MEDICINE/MEDICINE_CODE_240301/medi.csv") #data loading
medi_inform <- medi_inform %>%
mutate(WK_COMPN_4 = substr(jo,1,4)) %>%
select(-jo)
length(unique(medi_inform$WK_COMPN_4))
# jo에서 중복된 번호를 제거 - 2251개
medi_inform <- medi_inform[-which(duplicated(medi_inform$WK_COMPN_4)), ]
medi_inform <- medi_inform %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4))
# left join
MEDICINE_result <- MEDICINE_result %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4))
medicine_result2 <- left_join(MEDICINE_result, medi_inform, by='WK_COMPN_4')
head(medicine_result2$pt)
colSums(is.na(medicine_result2)) #결측치 확인(과거에 사용되었지만 현재 사라진 약제)
###결측치 검사(없어진 약제들) -> 날려버리기(omit을 사용해도 됨, 어차피 같은 열에서 결측치가 있으니까)
medicine_result2 <- na.omit(medicine_result2)
colSums(is.na(medicine_result2))
#항생제 분류(class,jo,prod,category)
medi_inform_anti <- read.csv("filtered_class_antibiotics.csv") %>%
mutate(WK_COMPN_4 = jo) %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4)) %>%
select(-jo)
medicine_result_anti <- inner_join(MEDICINE_result, medi_inform_anti, by='WK_COMPN_4')
colSums(is.na(medicine_result_anti)) #항생제가 아닌 약제 제거(class 611~619)
head(medicine_result_anti$pt)
#category로 합치기
medicine_result_anti2 <- medicine_result_anti %>%
group_by(USE_YEAR,USE_MONTH,category) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt))
#날짜 만들기
medicine_result_anti2$date = paste0(medicine_result_anti2$USE_YEAR,medicine_result_anti2$USE_MONTH)
medicine_result_anti2$date <- as.Date(paste(as.character(medicine_result_anti2$date), '01'), format='%Y%m%d')
###각 성분별 분류
{
##total
total <- medicine_result_anti %>%
group_by(USE_YEAR,USE_MONTH) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt))
#날짜 만들기
total$date = paste0(total$USE_YEAR,total$USE_MONTH)
total$date <- as.Date(paste(as.character(total$date), '01'), format='%Y%m%d')
##penicillin
peni <- medicine_result_anti2 %>%
filter(category == "Penicillins")
##Cephalosporins
cepha <- medicine_result_anti2 %>%
filter(category == "Cephalosporins")
##Tetracyclines
tetra <- medicine_result_anti2 %>%
filter(category == "Tetracyclines")
##Macrolides
macro <- medicine_result_anti2 %>%
filter(category == "Macrolides")
##Glycopeptides
glyco <- medicine_result_anti2 %>%
filter(category == "Glycopeptides")
##Aminoglycosides
amino <- medicine_result_anti2 %>%
filter(category == "Aminoglycosides")
##Amphenicols
amphe <- medicine_result_anti2 %>%
filter(category == "Amphenicols")
##Ketolides
keto <- medicine_result_anti2 %>%
filter(category == "Ketolides")
##other
other <- medicine_result_anti2 %>%
filter(category == "Other")
}
#### 요양기관 종별을 포함한 환자 데이터 추출 ----
# 반복 작업을 위한 함수 정의
process_med_file <- function(file_path) {
med_df_hos <- read_csv(file_path)
result <- med_df_hos %>%
mutate(USE_YEAR = factor(USE_YEAR),
USE_MONTH = factor(USE_MONTH)) %>%
group_by(WK_COMPN_4, OUT_IN_HOS,USE_YEAR, USE_MONTH) %>%
summarise(pres = sum(PRSCRPTN_TNDN_CNT),
pt = sum(PATIENT_CNT))
return(result)
} #pres는 처방수, pt는 환자수
# 결과를 저장할 리스트 생성
MEDICINE_list_hos <- list()
# MEDINE(1)부터 MEDINE(70)까지의 파일에 대해 반복 작업 수행
for (i in 1:70) {
file_path <- paste0("MEDICINE/MEDICINE (", i, ").csv")
if(!file.exists(file_path)){next}
result <- process_med_file(file_path)
MEDICINE_list_hos[[i]] <- result
}
# 결과를 하나의 데이터프레임으로 병합
MEDICINE_result_hos <- do.call(rbind, MEDICINE_list_hos)
# 결과 확인
print(MEDICINE_result_hos)
View(medi_inform)
#데이터 전처리
MEDICINE_result_hos <- MEDICINE_result_hos %>%
mutate(WK_COMPN_4 = factor(WK_COMPN_4))
medicine_result_hos2 <- left_join(MEDICINE_result_hos, medi_inform, by='WK_COMPN_4')
head(medicine_result2$pt)
colSums(is.na(medicine_result2)) #결측치 확인(과거에 사용되었지만 현재 사라진 약제)
View(MEDICINE_list_hos)
View(medicine_result_hos2)
###결측치 검사(없어진 약제들) -> 날려버리기(omit을 사용해도 됨, 어차피 같은 열에서 결측치가 있으니까)
medicine_result2 <- na.omit(medicine_result2)
colSums(is.na(medicine_result2))
View(medi_inform_anti)
rm(medicine_result_hos2)
medicine_result_anti_hos <- inner_join(MEDICINE_result_hos, medi_inform_anti, by='WK_COMPN_4')
colSums(is.na(medicine_result_anti_hos))
head(medicine_result_anti$pt)
View(medicine_result_anti_hos)
#category로 합치기
medicine_result_anti_hos2 <- medicine_result_anti_hos %>%
group_by(USE_YEAR,USE_MONTH,category) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt))
#날짜 만들기
medicine_result_anti2$date = paste0(medicine_result_anti2$USE_YEAR,medicine_result_anti2$USE_MONTH)
medicine_result_anti2$date <- as.Date(paste(as.character(medicine_result_anti2$date), '01'), format='%Y%m%d')
View(medicine_result_anti_hos2)
#날짜 만들기
medicine_result_anti_hos2$date = paste0(medicine_result_anti_hos2$USE_YEAR,medicine_result_anti_hos2$USE_MONTH)
medicine_result_anti_hos2$date <- as.Date(paste(as.character(medicine_result_anti_hos2$date), '01'), format='%Y%m%d')
####그래프 pt ----
ggplot(data=medicine_result_anti_hos2, aes(x = date, y = category_pt)) +
geom_point(color="black", size=1.5) +
geom_line(color="black") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,1500000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
View(medicine_result_anti_hos2)
#category로 합치기
medicine_result_anti_hos2 <- medicine_result_anti_hos %>%
group_by(USE_YEAR,USE_MONTH,category,OUT_IN_HOS) %>%
summarise(category_pres = sum(pres), category_pt = sum(pt))
View(medicine_result_anti_hos2)
#날짜 만들기
medicine_result_anti_hos2$date = paste0(medicine_result_anti_hos2$USE_YEAR,medicine_result_anti_hos2$USE_MONTH)
medicine_result_anti_hos2$date <- as.Date(paste(as.character(medicine_result_anti_hos2$date), '01'), format='%Y%m%d')
####그래프 pt ----
ggplot(data=medicine_result_anti_hos2, aes(x = date, y = category_pt)) +
geom_point(color="black", size=1.5) +
geom_line(color="black") +
geom_hline(yintercept=0, linetype="solid") +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype="dashed") +
#
scale_y_continuous(name="number",limits = c(0,1500000)) +
scale_x_date(name=" ", breaks = "12 months", date_labels = "%Y", limits = as.Date(c('2018-01-01','2023-09-01'))) +
#
theme_gray(20)+
theme(panel.background=element_blank(),
panel.grid.major=element_line(color="grey90", size=0.5),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = 'bold'),
axis.text.y = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'),
plot.title=element_text(size=rel(1.0)),
legend.title=element_blank())
